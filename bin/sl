#!/usr/bin/env python
from argparse import ArgumentParser, SUPPRESS
from sys import exit
from types import ClassType
from ConfigParser import SafeConfigParser, NoOptionError, NoSectionError

from SoftLayer import Client, SoftLayerError
from SoftLayer.CLI import CLIRunnable, action_list, format_output, load_module


def cli_client(cli_args):
    # Set up the primary parser. e.g. sl command
    parser = ArgumentParser(
        add_help=False, description='SoftLayer Command-line Client')
    actions = action_list()
    parser.add_argument(
        'module',
        help="Module name, try help or list",
        choices=[
            'help',
            'list',
        ] + actions, nargs='?')
    parser.add_argument('aux', nargs='*', help=SUPPRESS)
    add_fmt_argument(parser)

    parent_args, aux_args = parser.parse_known_args(args=cli_args)
    if parent_args.module is None:
        mod = 'help'
    else:
        mod = parent_args.module.lower()

    if mod == 'help':
        parser.print_help()
        exit(1)

    module = load_module(mod)

    # If there are no command actions, run execute() on the module if it exists
    if len(parent_args.aux) == 0:
        try:
            data = module.execute(parent_args)
            if data:
                print(format_output(data, parent_args))
            exit(0)
        except AttributeError:
            pass

    # Set up sub-command parser. e.g. sl command action
    parser = ArgumentParser(description=module.__doc__)
    parser.add_argument(mod)

    parser.add_argument(
        '--config', '-C',
        help='Config file')
    add_fmt_argument(parser)

    methods = filter(
        lambda m: isinstance(getattr(module, m), ClassType) and
        issubclass(getattr(module, m), CLIRunnable) and
        m != 'CLIRunnable',
        dir(module))

    if len(methods) > 0:
        action_parser = parser.add_subparsers(
            dest='action', description=module.__doc__)

        for method in methods:
            m = getattr(module, method)
            subparser = action_parser.add_parser(
                m.action,
                help=m.__doc__,
                description=m.__doc__,
            )
            m.add_additional_args(subparser)

    parsed_args = parser.parse_args(args=cli_args)
    action = parsed_args.action

    try:
        call = filter(
            lambda m: getattr(module, m).action == action, methods)[0]
    except KeyError:
        raise ValueError("No such method exists: %s" % action)

    client_params = {}
    config_files = ["~/.softlayer"]

    if parsed_args.config:
        config_files.append(parsed_args.config)

    try:
        client_params = parse_config(config_files)
    except ValueError, e:
        if parsed_args.config:
            print(e)

    # Do the work
    try:
        client = Client(**client_params)
        data = getattr(module, call).execute(client, parsed_args)
    except SoftLayerError, e:
        print(e)
        exit(1)

    # Format/Output data
    if data:
        print(format_output(data, parsed_args))


def add_fmt_argument(parser):
    fmt_default = 'raw'
    if sys.stdout.isatty():
        fmt_default = 'table'

    parser.add_argument(
        '--format',
        help='output format',
        choices=['table', 'raw'],
        default=fmt_default,
        dest='fmt')


def parse_config(files):
    import os.path

    config_files = [os.path.expanduser(f) for f in files]

    cp = SafeConfigParser()
    cp.read(config_files)
    config = {}

    try:
        username = cp.get('softlayer', 'username')
        password = cp.get('softlayer', 'api_key')
    except (NoSectionError, NoOptionError):
        pass
    else:
        config.update({"username": username, "api_key": password})

    try:
        config['endpoint_url'] = cp.get('softlayer', 'endpoint_url')
    except (NoOptionError, NoSectionError):
        pass

    return config


if __name__ == "__main__":
    import sys
    cli_client(sys.argv[1:])
